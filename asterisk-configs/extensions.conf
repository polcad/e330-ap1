; extensions.conf - the Asterisk dial plan
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI
; By default, *.wav files are stored to /var/spool/asterisk/monitor/

; The "General" category is for certain variables.
[general]
	static=yes
	writeprotect=no
	clearglobalvars=no
	autofallthrough=no

[globals]
	NoFailoverCause=1,16,17,18,19,21,22,28
	CONSOLE=Console/dsp				; Console interface for demo
	DYNAMIC_FEATURES=automon

[sip-local]
;include => dongle-incomming
include => phones
;include => dongle-outcomming

[dongle-incomming]
;All calls from external world to dongle will ring local SIP client i.e. Linphone on ext 2001.
;Make sure there is a SIP client on this extension!
;exten => _+X.,1,Goto(submenu,s,1)
;exten => _+X.,1,NoOp(Call from dongle ${CALLERID}. Start call recording.)
exten => s,1,NoOp(DEBUG: Context dongle-incomming: Call from dongle ${CALLERID}. Start call recording.)
same  => n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-FROM-${CALLERID(num)}-TO-${EXTEN}-${UNIQUEID})
same  => n,MixMonitor(${MONITOR_FILENAME}.wav,aW(1))
same  => n,Dial(SIP/2001@127.0.0.1:5066,60,tT)
same  => n,StopMixMonitor()
same  => n,NoOp(Call from dongle ${CALLERID} ended. Stop call recording.)
same  => n,Hangup()

exten => sms,1,Verbose(Incoming SMS from ${CALLERID(num)} ${BASE64_DECODE(${SMS_BASE64})})
same  => n,System(echo ‘${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} – ${DONGLENAME} – ${CALLERID(num)}: ${BASE64_DECODE(${SMS_BASE64})}’ >> /var/spool/asterisk/monitor/sms.txt)
same  => n,Hangup()

exten => ussd,1,Verbose(Incoming USSD: ${BASE64_DECODE(${USSD_BASE64})})
same  => n,System(echo '${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} - ${DONGLENAME}: ${BASE64_DECODE(${USSD_BASE64})}' >> /var/spool/asterisk/monitor/ussd.txt)
same  => n,Hangup()

; This context is used to call external numbers via 3G dongle
[dongle-outcomming]
exten => _+.,1,GoTo(00${EXTEN:1},1) ; Remove "plus" as it will cause problems with call recording
exten => _[0-9]X.,1,NoOp(DEBUG: Context dongle-outcomming: Dongle dialing ${EXTEN}. Start call recording.)
same  => n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-FROM-${CALLERID(num)}-TO-${EXTEN}-${UNIQUEID})
same  => n,MixMonitor(${MONITOR_FILENAME}.wav,aW(1))
same  => n,Dial(dongle/dongle0/${EXTEN},60,tT)
same  => n,StopMixMonitor()
same  => n,NoOp(DEBUG: Context dongle-outcomming: Terminating call to ${EXTEN}. Stop call recording.)
same  => n,Hangup()

; This context is for outgoing calls if extension is not found in OpenBTS subsrcriber registry database.
; It is executed when dialing from openbts a number that is not in dialdata_table or sip_buddies
[outbound-trunk]
include => sip-internal
include => dongle-outcomming

[phones]
; This is the context for handsets provisioned through the realtime database.
; This assumes that OpenBTS units all are running their SIP interfaces on port 5062.
exten => _+.,1,Set(EXTEN=${EXTEN:1}) ; Remove "plus"
exten => _X.,2,Set(Name=${ODBC_SQL(select dial from dialdata_table where exten = \"${EXTEN}\")})
exten => _X.,n,NoOp(DEBUG: Context phones: From "${CALLERID(num)}" To ${EXTEN} Dialing ${Name}.)
exten => _X.,n,GotoIf($["${Name}" = ""] ?outbound-trunk,${EXTEN},1) ; go to outbound-trunk if the nr is not in dialdata_table
exten => _X.,n,Set(IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where name = \"${Name}\")})
exten => _X.,n,GotoIf($["${IPAddr}" = ""] ?outbound-trunk,${EXTEN},1)  ; go to outbound-trunk if the IP nr is not in sip_buddies
exten => _X.,n,Macro(dialGSM,${Name}@${IPAddr}:5062,${EXTEN})
;exten => _X.,n,Dial(SIP/${Name}@${IPAddr}:5062)
;include => dongle-outcomming

[sip-internal]
; Create an extension, 6000, for evaluating echo latency.
exten => 6000,1,NoOp(DEBUG: Context sip-internal: Echo latency test if you dial 6000)
same  => n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-FROM-${CALLERID(num)}-TO-${EXTEN}-${UNIQUEID})
same  => n,MixMonitor(${MONITOR_FILENAME}.wav,aW(1))
same  => n,Answer()
same  => n,Playback(demo-echotest)	; Let them know what's going on
same  => n,Echo			; Do the echo test
same  => n,StopMixMonitor()
same  => n,Playback(demo-echodone)	; Let them know it's over
;same  => n,Goto(s,6)		; Start over
same  => n,Hangup()

exten => 6001,1,NoOp(DEBUG: Context sip-internal: A -hello world- if you dial 6001)
same  => n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-FROM-${CALLERID(num)}-TO-${EXTEN}-${UNIQUEID})
same  => n,MixMonitor(${MONITOR_FILENAME}.wav,aW(1))
same  => n,Answer()
same  => n,Playback(hello-world)
same  => n,StopMixMonitor()
same  => n,Hangup()

; The 2XXX extension is used for calling local SIP clients i.e. Linphone, Twinkle, etc. Note: Set client port to 5066
exten => _2XXX,1,NoOp(Debug: Context sip-internal, Dialing extension _2XXX)
same  => n,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-FROM-${CALLERID(num)}-TO-${EXTEN}-${UNIQUEID})
same  => n,MixMonitor(${MONITOR_FILENAME}.wav,abW(1))
same  => n,Dial(SIP/${EXTEN}@127.0.0.1:5066)
same  => n,StopMixMonitor()
same  => n,NoOp(Call from ${CALLERID} ended. Stop call recording.)
same  => n,Hangup()

;################################################################################
; Dictador, The 3001 extension is for factory testing with the test SIM.
;exten => _3XXX,1,NoOp()
;same  => n,Macro(dialGSM,IMSI204164747030797@127.0.0.1:5062,20,mtT)
;same  => n,Hangup()
;################################################################################
exten => _4XXX,1,Goto(submenu,s,1)

[submenu]
exten => s,1,NoOp()
same  => n,Answer()
same  => n,Background(/var/lib/asterisk/sounds/nr_wew)	; "Thanks for calling. Press 1 for Steve, 2 for..."
same  => n,WaitExten(20)
exten => 2101,1,Goto(default,2101,1)
same  => n,Hangup()
exten => 3001,1,Goto(default,3001,1)
same  => n,Hangup()
exten => 3002,1,Goto(default,3002,1)
same  => n,Hangup()

[macro-dialGSM]
exten => s,1,NoOp(DEBUG: Calling GSM nr ${ARG2}. Start call recording.)
exten => s,2,Set(MONITOR_FILENAME=/var/spool/asterisk/monitor/${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-FROM-${CALLERID(num)}-TO-${ARG2}-${UNIQUEID})
exten => s,3,MixMonitor(${MONITOR_FILENAME}.wav,aW(1))
exten => s,4,Dial(SIP/${ARG1},60,tT)
exten => s,5,StopMixMonitor()
exten => s,6,Goto(s-${DIALSTATUS},1)
exten => s-CANCEL,1,Hangup()
exten => s-NOANSWER,1,Hangup()
exten => s-BUSY,1,Busy(30)
exten => s-CONGESTION,1,Congestion(30)
exten => s-CHANUNAVAIL,1,Playback(ss-noservice)
;And this macro allows a specific block of 1,000 AT&T SIMs (310410186585000-310410186585999) to be dialed
;exten => _5XXX,1,Macro(dialGSM,310410186585${EXTEN:-3})

[default]
; This is the context for handsets that are allowed to attached via open registration.
; Normally, this context is only used for testing.
;exten => _[0-9].,1,Hangup()

;###################  The stuff below is not a part of this dialplan. It is just notes for future use.     #############
;#######################################################################################################################
[bits-and-pieces]
;bit of dialplan to catch anon callers ip addresses
exten => _X.,1,Noop(Dead calls rising)
exten => _X.,n,Set(uri=${SIPCHANINFO(uri)})
exten => _X.,n,Verbose(3,Unknown call from ${uri} to ${EXTEN})
exten => _X.,n,System(echo "[${STRFTIME(${EPOCH},,%b %d %H:%M:%S)}] SECURITY[] Unknown Call from ${CALLERIDNUM} to ${EXTEN} IPdetails ${CHANNEL(uri)}" >> /var/log/asterisk/sipsec.log)
exten => _X.,n,Hangup()
;jump to a context with a particular telephone number
same => n,GotoIf($[DIALPLAN_EXISTS(test,${EXTEN},1)]?test,${EXTEN},1)
[fix-callerid]
; Convert incoming CID from IMSIxxxx into a number
; https://github.com/DanielO/asterisk-openbts/blob/master/extensions.conf#L45
exten => s,1,Verbose(IMSI ${CALLERID(num)})
same => n,Set(CALLERID(num)=${ODBC_SQL(select callerid from sip_buddies where name = \"${CALLERID(num)}\")})
same => n,Verbose(Converted calling number to ${CALLERID(num)})
same => n,Return()

[sip-external]
; This is the top-level context that gives access to out-of-network calling.
; also includes the in-network calling.
;include => sip-local
;include => outbound-trunk

;http://manuals.loway.ch/QM_AdvancedConfig-chunked/ar01s14.html
;exten => 999,n,Set(MONITOR_FILENAME=/recordings/${STRFTIME(${EPOCH},,%Y-%m/%d)}/audio-${UNIQUEID}.wav)
;creates a new wav folder every day
